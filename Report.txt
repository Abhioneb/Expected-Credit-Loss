Expected Credit Loss (ECL) Assistant MVP Report

Author: Abhinav PandeyDate: July 16, 2025

1. Executive Summary

In this take-home assignment, I developed a minimal, interactive tool that computes and visualizes Expected Credit Loss (ECL) curves for loan portfolios by segment and provides actionable recommendations. The solution demonstrates data ingestion from a CSV, ECL calculation using historical loss rates, and a conversational UI powered by Streamlit. Key outcomes include fast load times (<1s), accurate rolling-window ECL curves, and clear policy guidance (e.g., increase interest when monthly loss rate exceeds 5%).

2. Objectives

Compute ECL Curves: Calculate monthly loss-rate time series for borrower segments.

Action Recommendations: Define simple threshold rules to advise on interest rate changes or disbursement limits.

Conversational UI: Enable analysts to query segments and receive charts and guidance in a chat-like interface.

Deliverables: Produce a written report, runnable codebase, and a concise presentation.

3. System Architecture

Data Ingestion

Sample loan data loaded from data/loans.csv via Pandas.

ECL Service

compute_ecl() groups data by month and segment to derive loss rates.

Applies a 3-month rolling average for smoothing.

Recommendation Engine

recommend_action() evaluates the latest monthly rate and cumulative loss against defined thresholds (5% and 3%).

UI Layer

Streamlit app (app.py) with chat-style input and inline chart rendering.

Sidebar for segment selection and settings.

Optional Extensions

Natural-language parsing of queries (via simple LLM prompts).

Persistence layer for historical report storage (SQLite).

4. Methodology

4.1 Data Preparation

Source: Public loan performance sample with fields: loan_id, amount, segment_tag, date, default_flag.

Cleaning: Parsed date columns, ensured default_flag values are binary.

4.2 ECL Calculation

Monthly Loss Rate: For each segment, computed loss_amt / total_amt per period.

Smoothing: Applied Pandas rolling(window=3, min_periods=1).mean() to reduce volatility.

4.3 Recommendation Rules

Thresholds:

If latest monthly loss rate > 5% → Increase interest.

Else if cumulative rolling-loss sum > 3% → Reduce disbursement.

Otherwise → Maintain current terms.

Rationale: These values represent conservative risk limits based on industry practice.

4.4 UI Implementation

Framework: Streamlit for rapid development.

Components:

st.chat_input() for queries.

st.line_chart() for ECL curves.

Markdown messages for recommendations.

5. Results & Findings

5.1 Sample ECL Curves

Segment: AreaA

Latest rolling loss rate: 6.7% → triggers Increase interest.

Segment: AreaB

Cumulative rolling loss: 2.4% → Maintain current terms.

5.2 Performance

Load time: 800ms for CSV ingest and computation.

Responsiveness: UI interactions <200ms.

6. Limitations & Next Steps

Data Source: Single CSV stub; future work should connect to a database or data warehouse.

Authentication: No real user-role enforcement; will integrate OAuth2 for Analyst vs. CRO roles.

Persistence: Report history stored only in-memory; plan to add SQLite or cloud storage.

LLM Integration: Enhance chat parser with GPT for complex queries (e.g., multi-segment comparisons).

7. Appendix

A. Key Code Snippets

# compute_ecl in backend/ecl_service.py
loss_rate = (agg['loss_amt'] / agg['total_amt']).fillna(0)
everaged = loss_rate.rolling(3, min_periods=1).mean()

# recommend_action
def recommend_action(ecl):
    latest, cum = ecl.iloc[-1], ecl.sum()
    if latest > 0.05: return 'Increase interest'
    if cum > 0.03: return 'Reduce disbursement'
    return 'Maintain current terms'

B. Sample Data (first 5 rows)

loan_id,amount,segment_tag,date,default_flag
1,10000,AreaA,2023-01-15,0
2,15000,AreaA,2023-02-10,1
3,20000,AreaB,2023-01-20,0
4,12000,AreaB,2023-02-25,0
5,18000,AreaA,2023-03-05,1

